function [output] = Gaussian(A)
%We all had to convert the gui input from string to numerical value
A = str2num(A);

[n,m] = size(A);
b = A(:,m); %last column holds answer values

matrix = A(:,1:end-1); %matrix left sides of equations
bias=b; %bias holds the answer values

%store coefficients on the main diagonal
for j = 1:m-1
    pvt = abs(A(j,j)); 
    pivot(j) = j;
    ipvt_temp = j;
    
    %find the pivot row
    for i = j+1:n 
        if abs(A(i,j)) > pvt
            pvt = abs(A(i,j));
            ipvt_temp = i; 
        end
    end
    
    %store multipliers for each pivot row to create zeros below diagonal
    for i = j + 1:n 
        A(i,j) = A(i,j)/A(j,j);
    end
    
    %create zeros below the main diagonal to create upper triangular matrix
    for i = j+1:n 
        for k=j+1:n
            A(i,k) = A(i,k)-A(i,j)*A(j,k);
        end
        b(i) = b(i)-A(i,j)*b(j);
    end
end

%carry out back substitution to solve for unknown variables
x(n) = b(n)/A(n,n); 
for j=m-1:-1:1
    x(j) = b(j);
    for k=n:-1:j+1
        x(j) = x(j) - x(k) * A(j,k);
    end
    x(j) = x(j)/A(j,j);
end
x = round(x,4);  

%We did the true mean error as a group so the code is the same in all
%functions
sum=0;
left=0;
biases=0;
for i = 1 :n
    for j=1 : n
        left = matrix(i,j) * x(j) + left;
    end
    right = bias(i);
    biases = abs(left-right);
    sum = sum + biases;
    left = 0;
    biases = 0;
end
MTE = (1/n)*sum;
output = [x MTE];

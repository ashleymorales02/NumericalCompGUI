classdef CourseProject2 < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure                        matlab.ui.Figure
        CalculateButton                 matlab.ui.control.Button
        ChooseamethodtosolveyoursystemDropDownLabel  matlab.ui.control.Label
        ChooseamethodtosolveyoursystemDropDown  matlab.ui.control.DropDown
        EditField                       matlab.ui.control.EditField
        RootsTextAreaLabel              matlab.ui.control.Label
        RootsTextArea                   matlab.ui.control.TextArea
        AugmentedMatrixEditFieldLabel   matlab.ui.control.Label
        AugmentedMatrixEditField        matlab.ui.control.EditField
        MeanTrueErrorTextAreaLabel      matlab.ui.control.Label
        MeanTrueErrorTextArea           matlab.ui.control.TextArea
        StoppingcriteriaDropDownLabel   matlab.ui.control.Label
        StoppingcriteriaDropDown        matlab.ui.control.DropDown
        OnlyforIterativeMethodsLabel    matlab.ui.control.Label
        TolerancethresholdEditFieldLabel  matlab.ui.control.Label
        TolerancethresholdEditField     matlab.ui.control.NumericEditField
        StartingapproximationEditFieldLabel  matlab.ui.control.Label
        StartingapproximationEditField  matlab.ui.control.EditField
        UploadButton                    matlab.ui.control.Button
        ClearButton                     matlab.ui.control.Button
    end

    % Callbacks that handle component events
    methods (Access = private)

        % Value changed function: StoppingcriteriaDropDown
        function StoppingcriteriaDropDownValueChanged(app, event)
            value = app.StoppingcriteriaDropDown.Value;
            if (strcmpi(value,'Mean absolute Error'))
                flag = 1;
            elseif (strcmpi(value,'Root mean square Error'))
                flag = 2;
            else
                flag = 0;
            end
            setappdata(app.StoppingcriteriaDropDown,'flag',flag);
        end

        % Button pushed function: CalculateButton
        function CalculateButtonPushed(app, event)
            value = app.ChooseamethodtosolveyoursystemDropDown.Value;
            A = app.AugmentedMatrixEditField.Value;
            tolerance = app.TolerancethresholdEditField.Value;
            approxs = app.StartingapproximationEditField.Value;
            if (strcmpi(approxs,''))
                approxs = '[0 0 0]';
            end
            flag = getappdata(app.StoppingcriteriaDropDown,'flag');
           
            m1 = 'Gaussian direct Elimination';
            m2 = 'Gauss-Seidel iterative method';
            m3 = 'Jacobi iterative method';
            
            %calls to numerical methods
            if (strcmpi(value,m1))
                val = Gaussian(A);
                set(app.RootsTextArea,'Value',num2str(val(1:end-1)));
                set(app.MeanTrueErrorTextArea,'Value',num2str(val(end)));
            
            elseif (strcmpi(value,m2))
                if (isDiagonallyDominant(A)==1)
                    val = GS(A,approxs,tolerance,flag);
                    set(app.RootsTextArea,'Value',num2str(val(1:end-1)));
                    set(app.MeanTrueErrorTextArea,'Value',num2str(val(end)));
                else
                    set(app.RootsTextArea,'Value','Error! Matrix is not diagonally dominant.');
                end
            
            elseif (strcmpi(value,m3))
                if (isDiagonallyDominant(A)==1)
                    val = jacob(A,approxs,tolerance,flag);
                    set(app.RootsTextArea,'Value',num2str(val(1:end-1)));
                    set(app.MeanTrueErrorTextArea,'Value',num2str(val(end)));
                else
                    set(app.RootsTextArea,'Value','Error! Matrix is not diagonally dominant.');
                end
            end
        end

        % Button pushed function: UploadButton
        function UploadButtonPushed(app, event)
            [file,path] = uigetfile('*.txt');
            fullFile = fullfile(path,file);
            fileID = fopen(fullFile,'r');
            A = textscan(fileID, '%s','Delimiter','\n');
            s='[';
            for i = 1:length(A{1})
                s = strcat(s,A{1}{i},{';'});
            end
            matrix = strcat(s,']');
            matrix = string(matrix);
            fclose(fileID);
            set(app.AugmentedMatrixEditField,'Value',matrix);  
        end

        % Button pushed function: ClearButton
        function ClearButtonPushed(app, event)
            set(app.AugmentedMatrixEditField,'Value','');
            set(app.TolerancethresholdEditField,'Value',0);
            set(app.StartingapproximationEditField,'Value','');
            set(app.RootsTextArea,'Value','');
            set(app.MeanTrueErrorTextArea,'Value','');
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.Color = [0.3922 0.8314 0.0745];
            app.UIFigure.Position = [100 100 764 612];
            app.UIFigure.Name = 'MATLAB App';

            % Create CalculateButton
            app.CalculateButton = uibutton(app.UIFigure, 'push');
            app.CalculateButton.ButtonPushedFcn = createCallbackFcn(app, @CalculateButtonPushed, true);
            app.CalculateButton.Position = [365 200 100 22];
            app.CalculateButton.Text = {'Calculate'; ''};

            % Create ChooseamethodtosolveyoursystemDropDownLabel
            app.ChooseamethodtosolveyoursystemDropDownLabel = uilabel(app.UIFigure);
            app.ChooseamethodtosolveyoursystemDropDownLabel.HorizontalAlignment = 'right';
            app.ChooseamethodtosolveyoursystemDropDownLabel.Position = [182 429 216 22];
            app.ChooseamethodtosolveyoursystemDropDownLabel.Text = 'Choose a method to solve your system';

            % Create ChooseamethodtosolveyoursystemDropDown
            app.ChooseamethodtosolveyoursystemDropDown = uidropdown(app.UIFigure);
            app.ChooseamethodtosolveyoursystemDropDown.Items = {'Gaussian direct Elimination', 'Gauss-Seidel iterative method', 'Jacobi iterative method'};
            app.ChooseamethodtosolveyoursystemDropDown.Position = [405 429 178 22];
            app.ChooseamethodtosolveyoursystemDropDown.Value = 'Gaussian direct Elimination';

            % Create EditField
            app.EditField = uieditfield(app.UIFigure, 'text');
            app.EditField.HorizontalAlignment = 'center';
            app.EditField.FontSize = 18;
            app.EditField.FontWeight = 'bold';
            app.EditField.BackgroundColor = [0.8 0.8 0.8];
            app.EditField.Position = [183 543 415 28];
            app.EditField.Value = 'Solving Systems of Linear Equations';

            % Create RootsTextAreaLabel
            app.RootsTextAreaLabel = uilabel(app.UIFigure);
            app.RootsTextAreaLabel.HorizontalAlignment = 'right';
            app.RootsTextAreaLabel.Position = [278 158 35 22];
            app.RootsTextAreaLabel.Text = 'Roots';

            % Create RootsTextArea
            app.RootsTextArea = uitextarea(app.UIFigure);
            app.RootsTextArea.Editable = 'off';
            app.RootsTextArea.Position = [327 122 176 60];

            % Create AugmentedMatrixEditFieldLabel
            app.AugmentedMatrixEditFieldLabel = uilabel(app.UIFigure);
            app.AugmentedMatrixEditFieldLabel.HorizontalAlignment = 'right';
            app.AugmentedMatrixEditFieldLabel.Position = [168 487 104 22];
            app.AugmentedMatrixEditFieldLabel.Text = 'Augmented Matrix';

            % Create AugmentedMatrixEditField
            app.AugmentedMatrixEditField = uieditfield(app.UIFigure, 'text');
            app.AugmentedMatrixEditField.Position = [289 487 324 22];

            % Create MeanTrueErrorTextAreaLabel
            app.MeanTrueErrorTextAreaLabel = uilabel(app.UIFigure);
            app.MeanTrueErrorTextAreaLabel.HorizontalAlignment = 'right';
            app.MeanTrueErrorTextAreaLabel.Position = [233 89 91 22];
            app.MeanTrueErrorTextAreaLabel.Text = 'Mean True Error';

            % Create MeanTrueErrorTextArea
            app.MeanTrueErrorTextArea = uitextarea(app.UIFigure);
            app.MeanTrueErrorTextArea.Editable = 'off';
            app.MeanTrueErrorTextArea.Position = [327 54 176 60];

            % Create StoppingcriteriaDropDownLabel
            app.StoppingcriteriaDropDownLabel = uilabel(app.UIFigure);
            app.StoppingcriteriaDropDownLabel.HorizontalAlignment = 'right';
            app.StoppingcriteriaDropDownLabel.Position = [255 273 94 22];
            app.StoppingcriteriaDropDownLabel.Text = 'Stopping criteria';

            % Create StoppingcriteriaDropDown
            app.StoppingcriteriaDropDown = uidropdown(app.UIFigure);
            app.StoppingcriteriaDropDown.Items = {'Mean absolute Error', 'Root mean square Error'};
            app.StoppingcriteriaDropDown.ValueChangedFcn = createCallbackFcn(app, @StoppingcriteriaDropDownValueChanged, true);
            app.StoppingcriteriaDropDown.Position = [381 273 145 22];
            app.StoppingcriteriaDropDown.Value = 'Mean absolute Error';

            % Create OnlyforIterativeMethodsLabel
            app.OnlyforIterativeMethodsLabel = uilabel(app.UIFigure);
            app.OnlyforIterativeMethodsLabel.HorizontalAlignment = 'center';
            app.OnlyforIterativeMethodsLabel.FontSize = 16;
            app.OnlyforIterativeMethodsLabel.FontWeight = 'bold';
            app.OnlyforIterativeMethodsLabel.FontColor = [0.4941 0.1843 0.5569];
            app.OnlyforIterativeMethodsLabel.Position = [286 380 209 22];
            app.OnlyforIterativeMethodsLabel.Text = 'Only for Iterative Methods:';

            % Create TolerancethresholdEditFieldLabel
            app.TolerancethresholdEditFieldLabel = uilabel(app.UIFigure);
            app.TolerancethresholdEditFieldLabel.HorizontalAlignment = 'right';
            app.TolerancethresholdEditFieldLabel.Position = [224 308 144 22];
            app.TolerancethresholdEditFieldLabel.Text = 'Tolerance threshold';

            % Create TolerancethresholdEditField
            app.TolerancethresholdEditField = uieditfield(app.UIFigure, 'numeric');
            app.TolerancethresholdEditField.Position = [387 308 125 22];

            % Create StartingapproximationEditFieldLabel
            app.StartingapproximationEditFieldLabel = uilabel(app.UIFigure);
            app.StartingapproximationEditFieldLabel.HorizontalAlignment = 'right';
            app.StartingapproximationEditFieldLabel.Position = [254 346 128 22];
            app.StartingapproximationEditFieldLabel.Text = 'Starting approximation';

            % Create StartingapproximationEditField
            app.StartingapproximationEditField = uieditfield(app.UIFigure, 'text');
            app.StartingapproximationEditField.Position = [387 346 125 22];

            % Create UploadButton
            app.UploadButton = uibutton(app.UIFigure, 'push');
            app.UploadButton.ButtonPushedFcn = createCallbackFcn(app, @UploadButtonPushed, true);
            app.UploadButton.Position = [625 487 100 22];
            app.UploadButton.Text = 'Upload ';

            % Create ClearButton
            app.ClearButton = uibutton(app.UIFigure, 'push');
            app.ClearButton.ButtonPushedFcn = createCallbackFcn(app, @ClearButtonPushed, true);
            app.ClearButton.Position = [61 487 100 22];
            app.ClearButton.Text = 'Clear';

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = CourseProject2

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end

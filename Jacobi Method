function [output] = jacob(a,initial,tolerance,flag)
%We all had to convert the gui input from string to numerical value
a = str2num(a); 
initial = str2num(initial);

[n,m] = size(a);
b = a(:,m); 
matrix = a;
matrix(:,end)=[]; 
bias=b; 

for i=1 : n
    b(i)=b(i)/a(i,i);
    new_x(i)=initial(i);
    for j=1 : n
        if (i~=j)
            a(i,j)=a(i,j)/a(i,i);
        end 
    end 
end 

error=10;

while (error>tolerance)
    error=0;
    if flag == 1
        for i=1 : n
            old_x(i)=new_x(i);
            new_x(i)=b(i);
        end
        for i=1 : n
            for j=1 : n
                if (i~=j)
                new_x(i)=new_x(i)-a(i,j)*old_x(j);
                end 
            end
            error=error+abs(new_x(i) - old_x(i)); 
        end 
        error=error/n; 
    else
        for i=1 : n
            old_x(i)=new_x(i);
            new_x(i)=b(i);
        end
        for i=1 : n
            for j=1 : n
                if (i~=j)
                new_x(i)=new_x(i)-a(i,j)*old_x(j);
                end 
            end
            error=(error+abs(new_x(i) - old_x(i)))^2; 
        end 
        error=sqrt(error/n); 
    end
end 
old_x = round(old_x,4);

%We did the true mean error as a group so the code is the same in all
%functions
sum=0;
left=0;
biases=0;
for i = 1 :n
    for j=1 : n
        left = matrix(i,j) * old_x(j) + left;
    end
    right = bias(i);
    biases = abs(left-right);
    sum = sum + biases;
    left = 0;
    biases = 0;
end
MTE = (1/n)*sum;
output = [old_x MTE];
